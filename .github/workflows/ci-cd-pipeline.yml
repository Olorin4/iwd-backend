name: CI/CD Pipeline

on:
    push:
        branches:
            - master
jobs:
    test:
        runs-on: ubuntu-latest

        services:
          postgres:
            image: postgres:13
            env:
              POSTGRES_USER: olorin4
              POSTGRES_PASSWORD: ""
              POSTGRES_DB: iwd_test
            ports:
              - 5432:5432

        steps:
            # Step 1: Check out the code
            - name: Checkout code
              uses: actions/checkout@v2

            # Step 2: Set up Node.js
            - name: Read Node.js version from .nvmrc
              run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_ENV
            - name: Set up Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: ${{ env.NODE_VERSION }}

            # Step 3: Install dependencies
            - name: Install dependencies
              run: npm ci

            # Step 4: Set test DATABASE_URL for Prisma
            - name: Set DATABASE_URL
              run: echo "DATABASE_URL=postgresql://olorin4@localhost:5432/iwd_test" >> $GITHUB_ENV

            # Step 5: Wait for PostgreSQL to be ready
            - name: Wait for PostgreSQL
              run: |
                until pg_isready -h localhost -p 5432 -U olorin4; do
                  echo "Waiting for PostgreSQL..."
                  sleep 2
                done

            # Step 6: Create and set up the test database
            - name: Create and set up test database
              run: |
                npm run db:test:create
                npm run db:test:setup

            # Step 7: Run tests
            - name: Run tests
              run: npm test

    build:
        if: github.actor == 'Olorin4'
        needs: test
        runs-on: ubuntu-latest

        steps:
            # Step 1: Check out the code
            - name: Checkout code
              uses: actions/checkout@v2

            # Step 2: Set up Node.js
            - name: Read Node.js version from .nvmrc
              run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_ENV
            - name: Set up Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: ${{ env.NODE_VERSION }}

            # Step 3: Install dependencies
            - name: Install dependencies
              run: npm ci

            # Step 4: Generate .env file from GitHub Secrets
            - name: Generate .env file
              run: |
                  echo "NODE_ENV=production" > .env
                  echo "PORT=${{ secrets.PORT }}" >> .env
                  echo "DB_URL=${{ secrets.DB_URL }}" >> .env
                  echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
                  echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
                  echo "DB_USER=${{ secrets.DB_USER }}" >> .env
                  echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env
                  echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
                  echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
                  echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> .env
                  echo "EMAIL_PASS=${{ secrets.EMAIL_PASS }}" >> .env
                  echo "EMAIL_FROM=${{ secrets.EMAIL_FROM }}" >> .env
                  echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env

            # Step 5: Deploy to Server (test)
            - name: Deploy to Server
              env:
                  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_AWS_SERVER_KEY }}
                  SERVER_IP: ${{ secrets.SERVER_IP }}
              run: |
                  echo "$SSH_PRIVATE_KEY" > private_key.pem
                  chmod 600 private_key.pem

                  echo "ðŸš€ Transferring files to the server using rsync..."
                  rsync -avz --exclude='node_modules' --exclude='.git' --exclude='.github' --exclude='logs' \
                    -e "ssh -i private_key.pem -o StrictHostKeyChecking=no" ./ \
                    nick-kalas@$SERVER_IP:/home/nick-kalas/apps/iwd-backend

                  echo "ðŸš€ Installing dependencies and restarting PM2..."
                  ssh -i private_key.pem -o StrictHostKeyChecking=no nick-kalas@$SERVER_IP << 'EOF'
                    # Source NVM to make node, npm, npx, and pm2 available
                    export NVM_DIR="$HOME/.nvm"
                    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
                    
                    cd /home/nick-kalas/apps/iwd-backend

                    # Reinstall deps if package-lock.json changed
                    # Prune dev dependencies and then install prod dependencies
                    npm prune --production
                    npm install --omit=dev

                    # Apply database migrations safely
                    echo "ðŸš€ Applying Prisma Migrations..."
                    # Explicitly run prisma migrate deploy
                    npx dotenv-cli -e .env -- npx prisma migrate deploy
                    npx prisma generate

                    # Force a clean restart of the application
                    pm2 flush
                    pm2 reload iwd-backend --update-env || pm2 start src/app.js --name iwd-backend --update-env
                    pm2 save


                    echo "âœ… Deployment completed successfully."
                  EOF
